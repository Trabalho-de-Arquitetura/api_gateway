scalar Date

enum UserRole {
    ADMIN
    PROFESSOR
    STUDENT
}

type UserDTO {
    id: ID
    name: String
    email: String
    password: String
    affiliatedSchool: String
    role: UserRole
}

type GroupDTO {
    id: ID
    name: String
    availableForProjects: Boolean
    coordinator: UserDTO
    students: [UserDTO]
    # Se quiser expor projetos de um grupo:
    # projects: [Project!]
}

enum ProjectStatus {
    PENDING_ANALYSIS
    UNDER_ANALYSIS
    REJECTED
    IN_PROGRESS
    FINISHED
}

type ProjectDTO {
    id: ID
    name: String
    objective: String
    summaryScope: String
    targetAudience: String
    expectedStartDate: Date
    status: ProjectStatus
    requester: UserDTO
    group: GroupDTO
}

# --- Inputs para Mutations (espelham os inputs dos microsserviços) ---
input CreateUserInput {
    name: String!
    email: String!
    password: String!
    affiliatedSchool: String!
    role: UserRole!
}

input UpdateUserInput {
    id: ID!
    name: String
    email: String
    affiliatedSchool: String
    role: UserRole
}

input CreateGroupInput {
    name: String!
    availableForProjects: Boolean!
    coordinatorId: ID!
    studentIds: [ID!]
}

input CreateProjectInput {
    name: String!
    objective: String!
    summaryScope: String!
    targetAudience: String!
    expectedStartDate: Date!
    status: ProjectStatus = PENDING_ANALYSIS
    requesterId: ID!
    groupId: ID
}

input UpdateGroupInput {
    id: ID!
    name: String
    availableForProjects: Boolean
    coordinatorId: ID
    studentIds: [ID!]
}

type Query {
    findUserById(id: ID!): UserDTO
    findUserByEmail(email: String!): UserDTO
    findUsersByRole(role: UserRole!): [UserDTO]
    findAllUsers: [UserDTO]

    groupById(id: ID!): GroupDTO
    findAllGroupsById(id: [ID!]!): [GroupDTO]
    findAllGroupsByNameIn(names: [String!]!): [GroupDTO!]!
    findAllGroupByCoordinator(coordinator_id: ID!): [GroupDTO!]!
    findAllGroupsByStudentId(student_id: ID!): [GroupDTO!]
    findAllGroups: [GroupDTO]

    projectById(id: ID!): ProjectDTO
    findAllProjects: [ProjectDTO!]
}

type Mutation {
    saveUser(input: CreateUserInput!): UserDTO!
    updateUser(input: UpdateUserInput!): UserDTO!
    deleteUser(id: ID!): Boolean!

    saveGroup(input: CreateGroupInput!): GroupDTO!
    updateGroup(input: UpdateGroupInput!): GroupDTO!
    deleteGroup(id: ID!): GroupDTO!

    createProject(input: CreateProjectInput!): ProjectDTO!
    # Adicione outras mutações conforme necessário (update, delete)
}